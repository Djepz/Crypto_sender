{
  "language": "Solidity",
  "sources": {
    "contracts/Transactions.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\ncontract Transactions {\r\n    uint256 transactionCounter;\r\n    TransferStruct[] transactions;\r\n\r\n    event Transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        string message,\r\n        uint256 timestamp,\r\n        string keyword\r\n    );\r\n\r\n    struct TransferStruct {\r\n        address sender;\r\n        address receiver;\r\n        uint amount;\r\n        string message;\r\n        uint256 timestamp;\r\n        string keyword;\r\n    }\r\n\r\n    constructor() {}\r\n\r\n    function addToBlockchain(\r\n        address payable _to,\r\n        uint256 _amount,\r\n        string memory _message,\r\n        string memory _keyword\r\n    ) public {\r\n        transactionCounter += 1;\r\n        transactions.push(\r\n            TransferStruct(\r\n                msg.sender,\r\n                _to,\r\n                _amount,\r\n                _message,\r\n                block.timestamp,\r\n                _keyword\r\n            )\r\n        );\r\n\r\n        emit Transfer(\r\n            msg.sender,\r\n            _to,\r\n            _amount,\r\n            _message,\r\n            block.timestamp,\r\n            _keyword\r\n        );\r\n    }\r\n\r\n    function getTransactions() public view returns (TransferStruct[] memory) {\r\n        return transactions;\r\n    }\r\n\r\n    function getTransactionsCount() public view returns (uint256) {\r\n        return transactionCounter;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}